// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::frame_metadata_v1_generated::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum FrameAssembledEventListMessageOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FrameAssembledEventListMessage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FrameAssembledEventListMessage<'a> {
  type Inner = FrameAssembledEventListMessage<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FrameAssembledEventListMessage<'a> {
  pub const VT_METADATA: flatbuffers::VOffsetT = 4;
  pub const VT_TIME: flatbuffers::VOffsetT = 6;
  pub const VT_VOLTAGE: flatbuffers::VOffsetT = 8;
  pub const VT_CHANNEL: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FrameAssembledEventListMessage { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args FrameAssembledEventListMessageArgs<'args>
  ) -> flatbuffers::WIPOffset<FrameAssembledEventListMessage<'bldr>> {
    let mut builder = FrameAssembledEventListMessageBuilder::new(_fbb);
    if let Some(x) = args.channel { builder.add_channel(x); }
    if let Some(x) = args.voltage { builder.add_voltage(x); }
    if let Some(x) = args.time { builder.add_time(x); }
    if let Some(x) = args.metadata { builder.add_metadata(x); }
    builder.finish()
  }


  #[inline]
  pub fn metadata(&self) -> FrameMetadataV1<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<FrameMetadataV1>>(FrameAssembledEventListMessage::VT_METADATA, None).unwrap()}
  }
  #[inline]
  pub fn time(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(FrameAssembledEventListMessage::VT_TIME, None)}
  }
  #[inline]
  pub fn voltage(&self) -> Option<flatbuffers::Vector<'a, u16>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u16>>>(FrameAssembledEventListMessage::VT_VOLTAGE, None)}
  }
  #[inline]
  pub fn channel(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(FrameAssembledEventListMessage::VT_CHANNEL, None)}
  }
}

impl flatbuffers::Verifiable for FrameAssembledEventListMessage<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<FrameMetadataV1>>("metadata", Self::VT_METADATA, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("time", Self::VT_TIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u16>>>("voltage", Self::VT_VOLTAGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("channel", Self::VT_CHANNEL, false)?
     .finish();
    Ok(())
  }
}
pub struct FrameAssembledEventListMessageArgs<'a> {
    pub metadata: Option<flatbuffers::WIPOffset<FrameMetadataV1<'a>>>,
    pub time: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub voltage: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u16>>>,
    pub channel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
}
impl<'a> Default for FrameAssembledEventListMessageArgs<'a> {
  #[inline]
  fn default() -> Self {
    FrameAssembledEventListMessageArgs {
      metadata: None, // required field
      time: None,
      voltage: None,
      channel: None,
    }
  }
}

pub struct FrameAssembledEventListMessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> FrameAssembledEventListMessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_metadata(&mut self, metadata: flatbuffers::WIPOffset<FrameMetadataV1<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<FrameMetadataV1>>(FrameAssembledEventListMessage::VT_METADATA, metadata);
  }
  #[inline]
  pub fn add_time(&mut self, time: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FrameAssembledEventListMessage::VT_TIME, time);
  }
  #[inline]
  pub fn add_voltage(&mut self, voltage: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u16>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FrameAssembledEventListMessage::VT_VOLTAGE, voltage);
  }
  #[inline]
  pub fn add_channel(&mut self, channel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FrameAssembledEventListMessage::VT_CHANNEL, channel);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> FrameAssembledEventListMessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    FrameAssembledEventListMessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FrameAssembledEventListMessage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, FrameAssembledEventListMessage::VT_METADATA,"metadata");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FrameAssembledEventListMessage<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FrameAssembledEventListMessage");
      ds.field("metadata", &self.metadata());
      ds.field("time", &self.time());
      ds.field("voltage", &self.voltage());
      ds.field("channel", &self.channel());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `FrameAssembledEventListMessage`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_frame_assembled_event_list_message_unchecked`.
pub fn root_as_frame_assembled_event_list_message(buf: &[u8]) -> Result<FrameAssembledEventListMessage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<FrameAssembledEventListMessage>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `FrameAssembledEventListMessage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_frame_assembled_event_list_message_unchecked`.
pub fn size_prefixed_root_as_frame_assembled_event_list_message(buf: &[u8]) -> Result<FrameAssembledEventListMessage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<FrameAssembledEventListMessage>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `FrameAssembledEventListMessage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_frame_assembled_event_list_message_unchecked`.
pub fn root_as_frame_assembled_event_list_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<FrameAssembledEventListMessage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<FrameAssembledEventListMessage<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `FrameAssembledEventListMessage` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_frame_assembled_event_list_message_unchecked`.
pub fn size_prefixed_root_as_frame_assembled_event_list_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<FrameAssembledEventListMessage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<FrameAssembledEventListMessage<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a FrameAssembledEventListMessage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `FrameAssembledEventListMessage`.
pub unsafe fn root_as_frame_assembled_event_list_message_unchecked(buf: &[u8]) -> FrameAssembledEventListMessage {
  flatbuffers::root_unchecked::<FrameAssembledEventListMessage>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed FrameAssembledEventListMessage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `FrameAssembledEventListMessage`.
pub unsafe fn size_prefixed_root_as_frame_assembled_event_list_message_unchecked(buf: &[u8]) -> FrameAssembledEventListMessage {
  flatbuffers::size_prefixed_root_unchecked::<FrameAssembledEventListMessage>(buf)
}
pub const FRAME_ASSEMBLED_EVENT_LIST_MESSAGE_IDENTIFIER: &str = "aev1";

#[inline]
pub fn frame_assembled_event_list_message_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, FRAME_ASSEMBLED_EVENT_LIST_MESSAGE_IDENTIFIER, false)
}

#[inline]
pub fn frame_assembled_event_list_message_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, FRAME_ASSEMBLED_EVENT_LIST_MESSAGE_IDENTIFIER, true)
}

#[inline]
pub fn finish_frame_assembled_event_list_message_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<FrameAssembledEventListMessage<'a>>) {
  fbb.finish(root, Some(FRAME_ASSEMBLED_EVENT_LIST_MESSAGE_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_frame_assembled_event_list_message_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<FrameAssembledEventListMessage<'a>>) {
  fbb.finish_size_prefixed(root, Some(FRAME_ASSEMBLED_EVENT_LIST_MESSAGE_IDENTIFIER));
}
