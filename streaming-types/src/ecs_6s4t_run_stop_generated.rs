// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum RunStopOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RunStop<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RunStop<'a> {
  type Inner = RunStop<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RunStop<'a> {
  pub const VT_STOP_TIME: flatbuffers::VOffsetT = 4;
  pub const VT_RUN_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_JOB_ID: flatbuffers::VOffsetT = 8;
  pub const VT_SERVICE_ID: flatbuffers::VOffsetT = 10;
  pub const VT_COMMAND_ID: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RunStop { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args RunStopArgs<'args>
  ) -> flatbuffers::WIPOffset<RunStop<'bldr>> {
    let mut builder = RunStopBuilder::new(_fbb);
    builder.add_stop_time(args.stop_time);
    if let Some(x) = args.command_id { builder.add_command_id(x); }
    if let Some(x) = args.service_id { builder.add_service_id(x); }
    if let Some(x) = args.job_id { builder.add_job_id(x); }
    if let Some(x) = args.run_name { builder.add_run_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn stop_time(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(RunStop::VT_STOP_TIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn run_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RunStop::VT_RUN_NAME, None)}
  }
  #[inline]
  pub fn job_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RunStop::VT_JOB_ID, None)}
  }
  #[inline]
  pub fn service_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RunStop::VT_SERVICE_ID, None)}
  }
  #[inline]
  pub fn command_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RunStop::VT_COMMAND_ID, None)}
  }
}

impl flatbuffers::Verifiable for RunStop<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("stop_time", Self::VT_STOP_TIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("run_name", Self::VT_RUN_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("job_id", Self::VT_JOB_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("service_id", Self::VT_SERVICE_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("command_id", Self::VT_COMMAND_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct RunStopArgs<'a> {
    pub stop_time: u64,
    pub run_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub job_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub service_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub command_id: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for RunStopArgs<'a> {
  #[inline]
  fn default() -> Self {
    RunStopArgs {
      stop_time: 0,
      run_name: None,
      job_id: None,
      service_id: None,
      command_id: None,
    }
  }
}

pub struct RunStopBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RunStopBuilder<'a, 'b> {
  #[inline]
  pub fn add_stop_time(&mut self, stop_time: u64) {
    self.fbb_.push_slot::<u64>(RunStop::VT_STOP_TIME, stop_time, 0);
  }
  #[inline]
  pub fn add_run_name(&mut self, run_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RunStop::VT_RUN_NAME, run_name);
  }
  #[inline]
  pub fn add_job_id(&mut self, job_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RunStop::VT_JOB_ID, job_id);
  }
  #[inline]
  pub fn add_service_id(&mut self, service_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RunStop::VT_SERVICE_ID, service_id);
  }
  #[inline]
  pub fn add_command_id(&mut self, command_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RunStop::VT_COMMAND_ID, command_id);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RunStopBuilder<'a, 'b> {
    let start = _fbb.start_table();
    RunStopBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RunStop<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RunStop<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RunStop");
      ds.field("stop_time", &self.stop_time());
      ds.field("run_name", &self.run_name());
      ds.field("job_id", &self.job_id());
      ds.field("service_id", &self.service_id());
      ds.field("command_id", &self.command_id());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `RunStop`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_run_stop_unchecked`.
pub fn root_as_run_stop(buf: &[u8]) -> Result<RunStop, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<RunStop>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `RunStop` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_run_stop_unchecked`.
pub fn size_prefixed_root_as_run_stop(buf: &[u8]) -> Result<RunStop, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<RunStop>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `RunStop` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_run_stop_unchecked`.
pub fn root_as_run_stop_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RunStop<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<RunStop<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `RunStop` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_run_stop_unchecked`.
pub fn size_prefixed_root_as_run_stop_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RunStop<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<RunStop<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a RunStop and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `RunStop`.
pub unsafe fn root_as_run_stop_unchecked(buf: &[u8]) -> RunStop {
  flatbuffers::root_unchecked::<RunStop>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed RunStop and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `RunStop`.
pub unsafe fn size_prefixed_root_as_run_stop_unchecked(buf: &[u8]) -> RunStop {
  flatbuffers::size_prefixed_root_unchecked::<RunStop>(buf)
}
pub const RUN_STOP_IDENTIFIER: &str = "6s4t";

#[inline]
pub fn run_stop_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, RUN_STOP_IDENTIFIER, false)
}

#[inline]
pub fn run_stop_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, RUN_STOP_IDENTIFIER, true)
}

#[inline]
pub fn finish_run_stop_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<RunStop<'a>>) {
  fbb.finish(root, Some(RUN_STOP_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_run_stop_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<RunStop<'a>>) {
  fbb.finish_size_prefixed(root, Some(RUN_STOP_IDENTIFIER));
}
