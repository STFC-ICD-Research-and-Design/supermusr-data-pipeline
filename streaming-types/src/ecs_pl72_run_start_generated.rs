// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::ecs_df12_det_spec_map_generated::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum RunStartOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RunStart<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RunStart<'a> {
  type Inner = RunStart<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RunStart<'a> {
  pub const VT_START_TIME: flatbuffers::VOffsetT = 4;
  pub const VT_STOP_TIME: flatbuffers::VOffsetT = 6;
  pub const VT_RUN_NAME: flatbuffers::VOffsetT = 8;
  pub const VT_INSTRUMENT_NAME: flatbuffers::VOffsetT = 10;
  pub const VT_NEXUS_STRUCTURE: flatbuffers::VOffsetT = 12;
  pub const VT_JOB_ID: flatbuffers::VOffsetT = 14;
  pub const VT_BROKER: flatbuffers::VOffsetT = 16;
  pub const VT_SERVICE_ID: flatbuffers::VOffsetT = 18;
  pub const VT_FILENAME: flatbuffers::VOffsetT = 20;
  pub const VT_N_PERIODS: flatbuffers::VOffsetT = 22;
  pub const VT_DETECTOR_SPECTRUM_MAP: flatbuffers::VOffsetT = 24;
  pub const VT_METADATA: flatbuffers::VOffsetT = 26;
  pub const VT_CONTROL_TOPIC: flatbuffers::VOffsetT = 28;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RunStart { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args RunStartArgs<'args>
  ) -> flatbuffers::WIPOffset<RunStart<'bldr>> {
    let mut builder = RunStartBuilder::new(_fbb);
    builder.add_stop_time(args.stop_time);
    builder.add_start_time(args.start_time);
    if let Some(x) = args.control_topic { builder.add_control_topic(x); }
    if let Some(x) = args.metadata { builder.add_metadata(x); }
    if let Some(x) = args.detector_spectrum_map { builder.add_detector_spectrum_map(x); }
    builder.add_n_periods(args.n_periods);
    if let Some(x) = args.filename { builder.add_filename(x); }
    if let Some(x) = args.service_id { builder.add_service_id(x); }
    if let Some(x) = args.broker { builder.add_broker(x); }
    if let Some(x) = args.job_id { builder.add_job_id(x); }
    if let Some(x) = args.nexus_structure { builder.add_nexus_structure(x); }
    if let Some(x) = args.instrument_name { builder.add_instrument_name(x); }
    if let Some(x) = args.run_name { builder.add_run_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn start_time(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(RunStart::VT_START_TIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn stop_time(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(RunStart::VT_STOP_TIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn run_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RunStart::VT_RUN_NAME, None)}
  }
  #[inline]
  pub fn instrument_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RunStart::VT_INSTRUMENT_NAME, None)}
  }
  #[inline]
  pub fn nexus_structure(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RunStart::VT_NEXUS_STRUCTURE, None)}
  }
  #[inline]
  pub fn job_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RunStart::VT_JOB_ID, None)}
  }
  #[inline]
  pub fn broker(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RunStart::VT_BROKER, None)}
  }
  #[inline]
  pub fn service_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RunStart::VT_SERVICE_ID, None)}
  }
  #[inline]
  pub fn filename(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RunStart::VT_FILENAME, None)}
  }
  #[inline]
  pub fn n_periods(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(RunStart::VT_N_PERIODS, Some(1)).unwrap()}
  }
  #[inline]
  pub fn detector_spectrum_map(&self) -> Option<SpectraDetectorMapping<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<SpectraDetectorMapping>>(RunStart::VT_DETECTOR_SPECTRUM_MAP, None)}
  }
  #[inline]
  pub fn metadata(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RunStart::VT_METADATA, None)}
  }
  #[inline]
  pub fn control_topic(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RunStart::VT_CONTROL_TOPIC, None)}
  }
}

impl flatbuffers::Verifiable for RunStart<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("start_time", Self::VT_START_TIME, false)?
     .visit_field::<u64>("stop_time", Self::VT_STOP_TIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("run_name", Self::VT_RUN_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("instrument_name", Self::VT_INSTRUMENT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("nexus_structure", Self::VT_NEXUS_STRUCTURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("job_id", Self::VT_JOB_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("broker", Self::VT_BROKER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("service_id", Self::VT_SERVICE_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("filename", Self::VT_FILENAME, false)?
     .visit_field::<u32>("n_periods", Self::VT_N_PERIODS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<SpectraDetectorMapping>>("detector_spectrum_map", Self::VT_DETECTOR_SPECTRUM_MAP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("metadata", Self::VT_METADATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("control_topic", Self::VT_CONTROL_TOPIC, false)?
     .finish();
    Ok(())
  }
}
pub struct RunStartArgs<'a> {
    pub start_time: u64,
    pub stop_time: u64,
    pub run_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub instrument_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub nexus_structure: Option<flatbuffers::WIPOffset<&'a str>>,
    pub job_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub broker: Option<flatbuffers::WIPOffset<&'a str>>,
    pub service_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub filename: Option<flatbuffers::WIPOffset<&'a str>>,
    pub n_periods: u32,
    pub detector_spectrum_map: Option<flatbuffers::WIPOffset<SpectraDetectorMapping<'a>>>,
    pub metadata: Option<flatbuffers::WIPOffset<&'a str>>,
    pub control_topic: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for RunStartArgs<'a> {
  #[inline]
  fn default() -> Self {
    RunStartArgs {
      start_time: 0,
      stop_time: 0,
      run_name: None,
      instrument_name: None,
      nexus_structure: None,
      job_id: None,
      broker: None,
      service_id: None,
      filename: None,
      n_periods: 1,
      detector_spectrum_map: None,
      metadata: None,
      control_topic: None,
    }
  }
}

pub struct RunStartBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RunStartBuilder<'a, 'b> {
  #[inline]
  pub fn add_start_time(&mut self, start_time: u64) {
    self.fbb_.push_slot::<u64>(RunStart::VT_START_TIME, start_time, 0);
  }
  #[inline]
  pub fn add_stop_time(&mut self, stop_time: u64) {
    self.fbb_.push_slot::<u64>(RunStart::VT_STOP_TIME, stop_time, 0);
  }
  #[inline]
  pub fn add_run_name(&mut self, run_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RunStart::VT_RUN_NAME, run_name);
  }
  #[inline]
  pub fn add_instrument_name(&mut self, instrument_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RunStart::VT_INSTRUMENT_NAME, instrument_name);
  }
  #[inline]
  pub fn add_nexus_structure(&mut self, nexus_structure: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RunStart::VT_NEXUS_STRUCTURE, nexus_structure);
  }
  #[inline]
  pub fn add_job_id(&mut self, job_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RunStart::VT_JOB_ID, job_id);
  }
  #[inline]
  pub fn add_broker(&mut self, broker: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RunStart::VT_BROKER, broker);
  }
  #[inline]
  pub fn add_service_id(&mut self, service_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RunStart::VT_SERVICE_ID, service_id);
  }
  #[inline]
  pub fn add_filename(&mut self, filename: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RunStart::VT_FILENAME, filename);
  }
  #[inline]
  pub fn add_n_periods(&mut self, n_periods: u32) {
    self.fbb_.push_slot::<u32>(RunStart::VT_N_PERIODS, n_periods, 1);
  }
  #[inline]
  pub fn add_detector_spectrum_map(&mut self, detector_spectrum_map: flatbuffers::WIPOffset<SpectraDetectorMapping<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<SpectraDetectorMapping>>(RunStart::VT_DETECTOR_SPECTRUM_MAP, detector_spectrum_map);
  }
  #[inline]
  pub fn add_metadata(&mut self, metadata: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RunStart::VT_METADATA, metadata);
  }
  #[inline]
  pub fn add_control_topic(&mut self, control_topic: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RunStart::VT_CONTROL_TOPIC, control_topic);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RunStartBuilder<'a, 'b> {
    let start = _fbb.start_table();
    RunStartBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RunStart<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RunStart<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RunStart");
      ds.field("start_time", &self.start_time());
      ds.field("stop_time", &self.stop_time());
      ds.field("run_name", &self.run_name());
      ds.field("instrument_name", &self.instrument_name());
      ds.field("nexus_structure", &self.nexus_structure());
      ds.field("job_id", &self.job_id());
      ds.field("broker", &self.broker());
      ds.field("service_id", &self.service_id());
      ds.field("filename", &self.filename());
      ds.field("n_periods", &self.n_periods());
      ds.field("detector_spectrum_map", &self.detector_spectrum_map());
      ds.field("metadata", &self.metadata());
      ds.field("control_topic", &self.control_topic());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `RunStart`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_run_start_unchecked`.
pub fn root_as_run_start(buf: &[u8]) -> Result<RunStart, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<RunStart>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `RunStart` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_run_start_unchecked`.
pub fn size_prefixed_root_as_run_start(buf: &[u8]) -> Result<RunStart, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<RunStart>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `RunStart` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_run_start_unchecked`.
pub fn root_as_run_start_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RunStart<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<RunStart<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `RunStart` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_run_start_unchecked`.
pub fn size_prefixed_root_as_run_start_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RunStart<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<RunStart<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a RunStart and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `RunStart`.
pub unsafe fn root_as_run_start_unchecked(buf: &[u8]) -> RunStart {
  flatbuffers::root_unchecked::<RunStart>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed RunStart and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `RunStart`.
pub unsafe fn size_prefixed_root_as_run_start_unchecked(buf: &[u8]) -> RunStart {
  flatbuffers::size_prefixed_root_unchecked::<RunStart>(buf)
}
pub const RUN_START_IDENTIFIER: &str = "pl72";

#[inline]
pub fn run_start_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, RUN_START_IDENTIFIER, false)
}

#[inline]
pub fn run_start_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, RUN_START_IDENTIFIER, true)
}

#[inline]
pub fn finish_run_start_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<RunStart<'a>>) {
  fbb.finish(root, Some(RUN_START_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_run_start_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<RunStart<'a>>) {
  fbb.finish_size_prefixed(root, Some(RUN_START_IDENTIFIER));
}
