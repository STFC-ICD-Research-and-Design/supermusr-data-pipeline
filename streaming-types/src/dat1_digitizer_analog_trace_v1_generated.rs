// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::frame_metadata_v1_generated::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum ChannelTraceOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ChannelTrace<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ChannelTrace<'a> {
  type Inner = ChannelTrace<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ChannelTrace<'a> {
  pub const VT_CHANNEL: flatbuffers::VOffsetT = 4;
  pub const VT_VOLTAGE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ChannelTrace { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ChannelTraceArgs<'args>
  ) -> flatbuffers::WIPOffset<ChannelTrace<'bldr>> {
    let mut builder = ChannelTraceBuilder::new(_fbb);
    if let Some(x) = args.voltage { builder.add_voltage(x); }
    builder.add_channel(args.channel);
    builder.finish()
  }


  #[inline]
  pub fn channel(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ChannelTrace::VT_CHANNEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn voltage(&self) -> Option<flatbuffers::Vector<'a, u16>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u16>>>(ChannelTrace::VT_VOLTAGE, None)}
  }
}

impl flatbuffers::Verifiable for ChannelTrace<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("channel", Self::VT_CHANNEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u16>>>("voltage", Self::VT_VOLTAGE, false)?
     .finish();
    Ok(())
  }
}
pub struct ChannelTraceArgs<'a> {
    pub channel: u32,
    pub voltage: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u16>>>,
}
impl<'a> Default for ChannelTraceArgs<'a> {
  #[inline]
  fn default() -> Self {
    ChannelTraceArgs {
      channel: 0,
      voltage: None,
    }
  }
}

pub struct ChannelTraceBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ChannelTraceBuilder<'a, 'b> {
  #[inline]
  pub fn add_channel(&mut self, channel: u32) {
    self.fbb_.push_slot::<u32>(ChannelTrace::VT_CHANNEL, channel, 0);
  }
  #[inline]
  pub fn add_voltage(&mut self, voltage: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u16>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ChannelTrace::VT_VOLTAGE, voltage);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ChannelTraceBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ChannelTraceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ChannelTrace<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ChannelTrace<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ChannelTrace");
      ds.field("channel", &self.channel());
      ds.field("voltage", &self.voltage());
      ds.finish()
  }
}
pub enum DigitizerAnalogTraceMessageOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DigitizerAnalogTraceMessage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DigitizerAnalogTraceMessage<'a> {
  type Inner = DigitizerAnalogTraceMessage<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DigitizerAnalogTraceMessage<'a> {
  pub const VT_DIGITIZER_ID: flatbuffers::VOffsetT = 4;
  pub const VT_METADATA: flatbuffers::VOffsetT = 6;
  pub const VT_SAMPLE_RATE: flatbuffers::VOffsetT = 8;
  pub const VT_CHANNELS: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DigitizerAnalogTraceMessage { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args DigitizerAnalogTraceMessageArgs<'args>
  ) -> flatbuffers::WIPOffset<DigitizerAnalogTraceMessage<'bldr>> {
    let mut builder = DigitizerAnalogTraceMessageBuilder::new(_fbb);
    builder.add_sample_rate(args.sample_rate);
    if let Some(x) = args.channels { builder.add_channels(x); }
    if let Some(x) = args.metadata { builder.add_metadata(x); }
    builder.add_digitizer_id(args.digitizer_id);
    builder.finish()
  }


  #[inline]
  pub fn digitizer_id(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(DigitizerAnalogTraceMessage::VT_DIGITIZER_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn metadata(&self) -> FrameMetadataV1<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<FrameMetadataV1>>(DigitizerAnalogTraceMessage::VT_METADATA, None).unwrap()}
  }
  #[inline]
  pub fn sample_rate(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(DigitizerAnalogTraceMessage::VT_SAMPLE_RATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn channels(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ChannelTrace<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ChannelTrace>>>>(DigitizerAnalogTraceMessage::VT_CHANNELS, None)}
  }
}

impl flatbuffers::Verifiable for DigitizerAnalogTraceMessage<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u8>("digitizer_id", Self::VT_DIGITIZER_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<FrameMetadataV1>>("metadata", Self::VT_METADATA, true)?
     .visit_field::<u64>("sample_rate", Self::VT_SAMPLE_RATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ChannelTrace>>>>("channels", Self::VT_CHANNELS, false)?
     .finish();
    Ok(())
  }
}
pub struct DigitizerAnalogTraceMessageArgs<'a> {
    pub digitizer_id: u8,
    pub metadata: Option<flatbuffers::WIPOffset<FrameMetadataV1<'a>>>,
    pub sample_rate: u64,
    pub channels: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ChannelTrace<'a>>>>>,
}
impl<'a> Default for DigitizerAnalogTraceMessageArgs<'a> {
  #[inline]
  fn default() -> Self {
    DigitizerAnalogTraceMessageArgs {
      digitizer_id: 0,
      metadata: None, // required field
      sample_rate: 0,
      channels: None,
    }
  }
}

pub struct DigitizerAnalogTraceMessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DigitizerAnalogTraceMessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_digitizer_id(&mut self, digitizer_id: u8) {
    self.fbb_.push_slot::<u8>(DigitizerAnalogTraceMessage::VT_DIGITIZER_ID, digitizer_id, 0);
  }
  #[inline]
  pub fn add_metadata(&mut self, metadata: flatbuffers::WIPOffset<FrameMetadataV1<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<FrameMetadataV1>>(DigitizerAnalogTraceMessage::VT_METADATA, metadata);
  }
  #[inline]
  pub fn add_sample_rate(&mut self, sample_rate: u64) {
    self.fbb_.push_slot::<u64>(DigitizerAnalogTraceMessage::VT_SAMPLE_RATE, sample_rate, 0);
  }
  #[inline]
  pub fn add_channels(&mut self, channels: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ChannelTrace<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DigitizerAnalogTraceMessage::VT_CHANNELS, channels);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DigitizerAnalogTraceMessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DigitizerAnalogTraceMessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DigitizerAnalogTraceMessage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, DigitizerAnalogTraceMessage::VT_METADATA,"metadata");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DigitizerAnalogTraceMessage<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DigitizerAnalogTraceMessage");
      ds.field("digitizer_id", &self.digitizer_id());
      ds.field("metadata", &self.metadata());
      ds.field("sample_rate", &self.sample_rate());
      ds.field("channels", &self.channels());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `DigitizerAnalogTraceMessage`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_digitizer_analog_trace_message_unchecked`.
pub fn root_as_digitizer_analog_trace_message(buf: &[u8]) -> Result<DigitizerAnalogTraceMessage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<DigitizerAnalogTraceMessage>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DigitizerAnalogTraceMessage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_digitizer_analog_trace_message_unchecked`.
pub fn size_prefixed_root_as_digitizer_analog_trace_message(buf: &[u8]) -> Result<DigitizerAnalogTraceMessage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<DigitizerAnalogTraceMessage>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DigitizerAnalogTraceMessage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_digitizer_analog_trace_message_unchecked`.
pub fn root_as_digitizer_analog_trace_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DigitizerAnalogTraceMessage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<DigitizerAnalogTraceMessage<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DigitizerAnalogTraceMessage` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_digitizer_analog_trace_message_unchecked`.
pub fn size_prefixed_root_as_digitizer_analog_trace_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DigitizerAnalogTraceMessage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<DigitizerAnalogTraceMessage<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DigitizerAnalogTraceMessage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DigitizerAnalogTraceMessage`.
pub unsafe fn root_as_digitizer_analog_trace_message_unchecked(buf: &[u8]) -> DigitizerAnalogTraceMessage {
  flatbuffers::root_unchecked::<DigitizerAnalogTraceMessage>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DigitizerAnalogTraceMessage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DigitizerAnalogTraceMessage`.
pub unsafe fn size_prefixed_root_as_digitizer_analog_trace_message_unchecked(buf: &[u8]) -> DigitizerAnalogTraceMessage {
  flatbuffers::size_prefixed_root_unchecked::<DigitizerAnalogTraceMessage>(buf)
}
pub const DIGITIZER_ANALOG_TRACE_MESSAGE_IDENTIFIER: &str = "dat1";

#[inline]
pub fn digitizer_analog_trace_message_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DIGITIZER_ANALOG_TRACE_MESSAGE_IDENTIFIER, false)
}

#[inline]
pub fn digitizer_analog_trace_message_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DIGITIZER_ANALOG_TRACE_MESSAGE_IDENTIFIER, true)
}

#[inline]
pub fn finish_digitizer_analog_trace_message_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<DigitizerAnalogTraceMessage<'a>>) {
  fbb.finish(root, Some(DIGITIZER_ANALOG_TRACE_MESSAGE_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_digitizer_analog_trace_message_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<DigitizerAnalogTraceMessage<'a>>) {
  fbb.finish_size_prefixed(root, Some(DIGITIZER_ANALOG_TRACE_MESSAGE_IDENTIFIER));
}
