// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::frame_metadata_v1_generated::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum HistogramOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Histogram<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Histogram<'a> {
  type Inner = Histogram<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Histogram<'a> {
  pub const VT_CHANNEL: flatbuffers::VOffsetT = 4;
  pub const VT_COUNTS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Histogram { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args HistogramArgs<'args>
  ) -> flatbuffers::WIPOffset<Histogram<'bldr>> {
    let mut builder = HistogramBuilder::new(_fbb);
    if let Some(x) = args.counts { builder.add_counts(x); }
    builder.add_channel(args.channel);
    builder.finish()
  }


  #[inline]
  pub fn channel(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(Histogram::VT_CHANNEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn counts(&self) -> Option<flatbuffers::Vector<'a, u16>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u16>>>(Histogram::VT_COUNTS, None)}
  }
}

impl flatbuffers::Verifiable for Histogram<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("channel", Self::VT_CHANNEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u16>>>("counts", Self::VT_COUNTS, false)?
     .finish();
    Ok(())
  }
}
pub struct HistogramArgs<'a> {
    pub channel: u32,
    pub counts: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u16>>>,
}
impl<'a> Default for HistogramArgs<'a> {
  #[inline]
  fn default() -> Self {
    HistogramArgs {
      channel: 0,
      counts: None,
    }
  }
}

pub struct HistogramBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HistogramBuilder<'a, 'b> {
  #[inline]
  pub fn add_channel(&mut self, channel: u32) {
    self.fbb_.push_slot::<u32>(Histogram::VT_CHANNEL, channel, 0);
  }
  #[inline]
  pub fn add_counts(&mut self, counts: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u16>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Histogram::VT_COUNTS, counts);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HistogramBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HistogramBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Histogram<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Histogram<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Histogram");
      ds.field("channel", &self.channel());
      ds.field("counts", &self.counts());
      ds.finish()
  }
}
pub enum HistogramMessageOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct HistogramMessage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HistogramMessage<'a> {
  type Inner = HistogramMessage<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> HistogramMessage<'a> {
  pub const VT_METADATA: flatbuffers::VOffsetT = 4;
  pub const VT_BIN_WIDTH: flatbuffers::VOffsetT = 6;
  pub const VT_CHANNELS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    HistogramMessage { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args HistogramMessageArgs<'args>
  ) -> flatbuffers::WIPOffset<HistogramMessage<'bldr>> {
    let mut builder = HistogramMessageBuilder::new(_fbb);
    if let Some(x) = args.channels { builder.add_channels(x); }
    builder.add_bin_width(args.bin_width);
    if let Some(x) = args.metadata { builder.add_metadata(x); }
    builder.finish()
  }


  #[inline]
  pub fn metadata(&self) -> FrameMetadataV1<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<FrameMetadataV1>>(HistogramMessage::VT_METADATA, None).unwrap()}
  }
  #[inline]
  pub fn bin_width(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(HistogramMessage::VT_BIN_WIDTH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn channels(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Histogram<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Histogram>>>>(HistogramMessage::VT_CHANNELS, None)}
  }
}

impl flatbuffers::Verifiable for HistogramMessage<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<FrameMetadataV1>>("metadata", Self::VT_METADATA, true)?
     .visit_field::<u32>("bin_width", Self::VT_BIN_WIDTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Histogram>>>>("channels", Self::VT_CHANNELS, false)?
     .finish();
    Ok(())
  }
}
pub struct HistogramMessageArgs<'a> {
    pub metadata: Option<flatbuffers::WIPOffset<FrameMetadataV1<'a>>>,
    pub bin_width: u32,
    pub channels: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Histogram<'a>>>>>,
}
impl<'a> Default for HistogramMessageArgs<'a> {
  #[inline]
  fn default() -> Self {
    HistogramMessageArgs {
      metadata: None, // required field
      bin_width: 0,
      channels: None,
    }
  }
}

pub struct HistogramMessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HistogramMessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_metadata(&mut self, metadata: flatbuffers::WIPOffset<FrameMetadataV1<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<FrameMetadataV1>>(HistogramMessage::VT_METADATA, metadata);
  }
  #[inline]
  pub fn add_bin_width(&mut self, bin_width: u32) {
    self.fbb_.push_slot::<u32>(HistogramMessage::VT_BIN_WIDTH, bin_width, 0);
  }
  #[inline]
  pub fn add_channels(&mut self, channels: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Histogram<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HistogramMessage::VT_CHANNELS, channels);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HistogramMessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HistogramMessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HistogramMessage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, HistogramMessage::VT_METADATA,"metadata");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for HistogramMessage<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("HistogramMessage");
      ds.field("metadata", &self.metadata());
      ds.field("bin_width", &self.bin_width());
      ds.field("channels", &self.channels());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `HistogramMessage`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_histogram_message_unchecked`.
pub fn root_as_histogram_message(buf: &[u8]) -> Result<HistogramMessage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<HistogramMessage>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `HistogramMessage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_histogram_message_unchecked`.
pub fn size_prefixed_root_as_histogram_message(buf: &[u8]) -> Result<HistogramMessage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<HistogramMessage>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `HistogramMessage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_histogram_message_unchecked`.
pub fn root_as_histogram_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<HistogramMessage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<HistogramMessage<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `HistogramMessage` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_histogram_message_unchecked`.
pub fn size_prefixed_root_as_histogram_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<HistogramMessage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<HistogramMessage<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a HistogramMessage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `HistogramMessage`.
pub unsafe fn root_as_histogram_message_unchecked(buf: &[u8]) -> HistogramMessage {
  flatbuffers::root_unchecked::<HistogramMessage>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed HistogramMessage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `HistogramMessage`.
pub unsafe fn size_prefixed_root_as_histogram_message_unchecked(buf: &[u8]) -> HistogramMessage {
  flatbuffers::size_prefixed_root_unchecked::<HistogramMessage>(buf)
}
pub const HISTOGRAM_MESSAGE_IDENTIFIER: &str = "hst1";

#[inline]
pub fn histogram_message_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, HISTOGRAM_MESSAGE_IDENTIFIER, false)
}

#[inline]
pub fn histogram_message_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, HISTOGRAM_MESSAGE_IDENTIFIER, true)
}

#[inline]
pub fn finish_histogram_message_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<HistogramMessage<'a>>) {
  fbb.finish(root, Some(HISTOGRAM_MESSAGE_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_histogram_message_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<HistogramMessage<'a>>) {
  fbb.finish_size_prefixed(root, Some(HISTOGRAM_MESSAGE_IDENTIFIER));
}
